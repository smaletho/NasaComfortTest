@model TestNasa.Controllers.ImageAnnotateModel

@{
    ViewBag.Title = "ImageEdit";
}




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>@ViewBag.Title</title>

    <script src="//use.edgefonts.net/quicksand;forum.js"></script>

    <style>
        html {
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            -webkit-box-sizing: border-box;
            transform-origin: top left;
            -moz-transform-origin: top left;
            -webkit-transform-origin: top left;
        }

        *, *:before, *:after {
            box-sizing: inherit;
            -moz-box-sizing: inherit;
            -webkit-box-sizing: inherit;
        }

        body {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            /*overflow:hidden;*/
        }

        div {
            font-family: Arial;
            cursor: default;
        }

        .menu_option {
            cursor: pointer;
            clear: left;
            margin-bottom: 10px;
            overflow: auto;
        }

            .menu_option:hover {
                background-color: #ebebeb;
                color: black;
            }

        .menu_option_selected {
            background-color: silver;
        }

        #main_content {
            width: 1420px;
            /*height:740px;*/
            position: relative;
        }
    </style>


</head>


<body style="width:800px;height:481px;position:relative;border:1px solid">

    <img style="display:table;margin: 0 auto;width:800px;height:481px;position:absolute;top:0;left:0;z-index:1" src="@Url.Content("~/")@Model.ImageString" />
    <canvas id="can" width="800" height="481" style="position:absolute;top:0;left:0;z-index:2"></canvas>

    <div style="position:absolute;bottom:-300px;display:block">
        <div>Choose Color</div>
        <div style="width:50px;height:30px;background:green;" id="green" onclick="color(this)"></div>
        <div style="width:50px;height:30px;background:blue;" id="blue" onclick="color(this)"></div>
        <div style="width:50px;height:30px;background:red;" id="red" onclick="color(this)"></div>
        <div style="width:50px;height:30px;background:yellow;" id="yellow" onclick="color(this)"></div>
        <div style="width:50px;height:30px;background:orange;" id="orange" onclick="color(this)"></div>
        <div style="width:50px;height:30px;background:black;" id="black" onclick="color(this)"></div>
        <div>Eraser</div>
        <div style="width:50px;height:30px;background:white;border:2px solid;" id="white" onclick="color(this)"></div>
    </div>

</body>


</html>


<script>var urlRoot = '@Url.Content("~/")';</script>
<script src="~/Scripts/jquery-2.1.4.min.js"></script>
<script src="~/Scripts/jquery-ui-1.11.4.min.js"></script>
<script src="~/Scripts/ClickPlugin.js"></script>

<script>
    //set this variable
    var context;
    var mouse = { x: 0, y: 0 };

    $(function () {
        
        //$("html").css('transform', 'scale(@Model.DocumentScale)');


        init();
        
    });

    var canvas, ctx, flag = false,
    prevX = 0,
    currX = 0,
    prevY = 0,
    currY = 0,
    dot_flag = false;

    var x = "black",
        y = 2;

    function init() {
        canvas = document.getElementById('can');
        ctx = canvas.getContext("2d");
        w = canvas.width;
        h = canvas.height;

        canvas.addEventListener("mousemove", function (e) {
            findxy('move', e)
        }, false);
        canvas.addEventListener("mousedown", function (e) {
            findxy('down', e)
        }, false);
        canvas.addEventListener("mouseup", function (e) {
            findxy('up', e)
        }, false);
        canvas.addEventListener("mouseout", function (e) {
            findxy('out', e)
        }, false);
    }

    function color(obj) {
        switch (obj.id) {
            case "green":
                x = "green";
                break;
            case "blue":
                x = "blue";
                break;
            case "red":
                x = "red";
                break;
            case "yellow":
                x = "yellow";
                break;
            case "orange":
                x = "orange";
                break;
            case "black":
                x = "black";
                break;
            case "white":
                x = "white";
                break;
        }
        if (x == "white") y = 14;
        else y = 2;

    }

    function draw() {
        ctx.beginPath();
        ctx.moveTo(prevX, prevY);
        ctx.lineTo(currX, currY);
        ctx.strokeStyle = x;
        ctx.lineWidth = y;
        ctx.stroke();
        ctx.closePath();
    }

    function erase() {
        var m = confirm("Want to clear");
        if (m) {
            ctx.clearRect(0, 0, w, h);
            document.getElementById("canvasimg").style.display = "none";
        }
    }

    function save() {
        document.getElementById("canvasimg").style.border = "2px solid";
        var dataURL = canvas.toDataURL();
        document.getElementById("canvasimg").src = dataURL;
        document.getElementById("canvasimg").style.display = "inline";
    }

    function findxy(res, e) {
        if (res == 'down') {
            prevX = currX;
            prevY = currY;
            currX = e.clientX - canvas.offsetLeft - 5;
            currY = e.clientY - canvas.offsetTop - 5;

            flag = true;
            dot_flag = true;
            if (dot_flag) {
                ctx.beginPath();
                ctx.fillStyle = x;
                ctx.fillRect(currX, currY, 2, 2);
                ctx.closePath();
                dot_flag = false;
            }
        }
        if (res == 'up' || res == "out") {
            flag = false;
        }
        if (res == 'move') {
            if (flag) {
                prevX = currX;
                prevY = currY;
                currX = e.clientX - canvas.offsetLeft - 5;
                currY = e.clientY - canvas.offsetTop - 5;
                draw();
            }
        }
    }

</script>






